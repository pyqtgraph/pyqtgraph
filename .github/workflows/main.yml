name: main

on:
  push:
    branches-ignore: "dependabot/**"
  pull_request:
    paths-ignore:
      - '**.md'

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1

concurrency: 
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test-pip:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        qt-lib: [pyqt, pyside]
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - python-version: "3.8"
            qt-lib: "pyqt"
            qt-version: "PyQt5~=5.15.0"
          - python-version: "3.8"
            qt-lib: "pyside"
            qt-version: "PySide2~=5.15.0"
          - python-version: "3.9"
            qt-lib: "pyqt"
            qt-version: "PyQt6~=6.2.0 PyQt6-Qt6~=6.2.0"
          - python-version: "3.9"
            qt-lib: "pyside"
            qt-version: "PySide6~=6.2.0"
          - python-version: "3.10"
            qt-lib: "pyqt"
            qt-version: "PyQt6"
          - python-version: "3.10"
            qt-lib: "pyside"
            qt-version: "PySide6-Essentials"
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: ${{ matrix.python-version }}
        cache: pip
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: "Install Windows-Mesa OpenGL DLL"
      if: runner.os == 'Windows'
      run: |
        curl -LJO https://github.com/pal1000/mesa-dist-win/releases/download/19.2.7/mesa3d-19.2.7-release-msvc.7z
        7z x mesa3d-19.2.7-release-msvc.7z
        cd x64
        xcopy opengl32.dll C:\windows\system32\mesadrv.dll*
        xcopy opengl32.dll C:\windows\syswow64\mesadrv.dll*
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DLL /t REG_SZ /d "mesadrv.dll" /f
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DriverVersion /t REG_DWORD /d 1 /f
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Flags /t REG_DWORD /d 1 /f
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Version /t REG_DWORD /d 2 /f
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DLL /t REG_SZ /d "mesadrv.dll" /f
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v DriverVersion /t REG_DWORD /d 1 /f
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Flags /t REG_DWORD /d 1 /f 
        REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\OpenGLDrivers\MSOGL" /v Version /t REG_DWORD /d 2 /f 
      shell: cmd
    - name: Install Dependencies
      run: |
        python -m pip install -r .github/workflows/requirements.txt ${{ matrix.qt-version }} .
    - name: "Install Linux VirtualDisplay"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install --no-install-recommends -y \
          libxkbcommon-x11-0 \
          x11-utils \
          libyaml-dev \
          libegl1-mesa \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libopengl0
    - name: 'Debug Info'
      run: |
        echo python location: `which python`
        echo python version: `python --version`
        echo pytest location: `which pytest`
        echo installed packages
        python -m pip list
        echo pyqtgraph system info
        python -c "import pyqtgraph as pg; pg.systemInfo()"
      shell: bash
      env:
        QT_DEBUG_PLUGINS: 1
    - name: 'XVFB Display Info'
      run: |
        xvfb-run --server-args="-screen 0, 1920x1200x24 -ac +extension GLX +render -noreset" python -m pyqtgraph.util.glinfo
        xvfb-run --server-args="-screen 0, 1920x1200x24 -ac +extension GLX +render -noreset" python -m pyqtgraph.util.get_resolution
      if: runner.os == 'Linux'
    - name: 'Display Info'
      run: |
        python -m pyqtgraph.util.glinfo
        python -m pyqtgraph.util.get_resolution
      if: runner.os != 'Linux'
    - name: Run Tests
      run: |
        mkdir $SCREENSHOT_DIR
        pytest tests -v
        # pytest pyqtgraph/examples -v -n 2
      shell: bash
    - name: Upload Screenshots
      uses: actions/upload-artifact@v3
      with:
        name: Screenshots (Python ${{ matrix.python-version }} - Qt-Bindings ${{ matrix.qt-lib }} - OS ${{ matrix.os }})
        path: $SCREENSHOT_DIR
        if-no-files-found: ignore
    env:
      SCREENSHOT_DIR: ./screenshots


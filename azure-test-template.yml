# Azure Pipelines CI job template for PyDM Tests
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/anaconda?view=azure-devops
parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      Python27-Qt4:
        python.version: '2.7'
        install.method: "conda"
        qt.bindings: "pyqt=4"
      Python27-PySide:
        python.version: '2.7'
        qt.bindings: "pyside"
        install.method: "conda"
      Python37-PyQt-5.9:
        python.version: "3.7"
        qt.bindings: "pyqt"
        install.method: "conda"
      Python37-PySide2-5.6:
        python.version: "3.7"
        qt.bindings: "pyside2"
        install.method: "conda"
      Python35-PyQt-5.12:
        python.version: '3.5'
        qt.bindings: "PyQt5"
        install.method: "pip"
      Python35-PySide2-5.12:
        python.version: "3.5"
        qt.bindings: "PySide2"
        install.method: "pip"

  steps:

# windows set resolution
  - task: ScreenResolutionUtility@1
    inputs:
      displaySettings: 'specific'
      width: '1920'
      height: '1080'
    condition: eq(variables['agent.os'], 'Windows_NT' )
  
# pip - all
  - bash: |
      pip3 install setuptools wheel
      pip3 install $(qt.bindings)
      pip3 install numpy scipy pyopengl pytest flake8 six coverage
      pip3 install pytest-azurepipelines pytest-xdist pytest-cov
    displayName: "Pip - Install Dependencies"
    condition: eq(variables['install.method'], 'pip')

# xvfb - Linux
  - bash: |
      sudo apt-get install -y xvfb libxkbcommon-x11-0  # herbstluftwm
      pip3 install pytest-xvfb
    displayName: "Linux Virtual Display Setup (pip)"
    condition: and(eq(variables['install.method'], 'pip'), eq(variables['agent.os'], 'Linux' ))
  
# pip - macOS/Linux
  - bash: |
      echo python location: `which python3`
      echo python version: `python3 --version`
      echo pytest location: `which pytest`
      echo installed packages
      pip3 list
      echo pyqtgraph system info
      python3 -c "import pyqtgraph as pg; pg.systemInfo()"
    displayName: 'Debug - pip - macOS & Linux'
    continueOnError: false
    condition: and(eq(variables['install.method'], 'pip' ), ne(variables['agent.os'], 'Windows_NT' ))

# pip - macOS/Linux
  - bash: python3 -m pytest pyqtgraph -sv --test-run-title="Tests for $(Agent.OS) - Python $(python.version) - Install Method $(install.method)- Bindings $(qt.bindings)" --napoleon-docstrings
    displayName: 'Tests - Run - pip - macOS & Linux' 
    continueOnError: false
    env:
      DISPLAY: :99.0
    condition: and(eq(variables['install.method'], 'pip' ), ne(variables['agent.os'], 'Windows_NT' ))

# pip - Windows
  - bash: |
      echo python location: `which python`
      echo python version: `python --version`
      echo pytest location: `which pytest`
      echo installed packages
      pip list
      echo pyqtgraph system info
      python -c "import pyqtgraph as pg; pg.systemInfo()"
    displayName: 'Debug - pip - Windows'
    continueOnError: false
    condition: and(eq(variables['install.method'], 'pip' ), eq(variables['agent.os'], 'Windows_NT' ))

# pip - Windows
  - bash: python -m pytest pyqtgraph -sv --test-run-title="Tests for $(Agent.OS) - Python $(python.version) - Install Method $(install.method)- Bindings $(qt.bindings)" --napoleon-docstrings
    displayName: 'Tests - Run - pip - Windows'
    continueOnError: false
    condition: and(eq(variables['install.method'], 'pip' ), eq(variables['agent.os'], 'Windows_NT' ))

# conda - windows
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: 'Windows - Add conda to PATH'
    condition: eq(variables['agent.os'], 'Windows_NT' )

# conda - macOS
  - bash: |
      echo '##vso[task.prependpath]$CONDA/bin'
      # Fix Anaconda permissions
      sudo install -d -m 0777 /usr/local/miniconda/envs
    displayName: 'MacOS - Add conda to PATH'
    condition: and(eq(variables['install.method'], 'conda' ), eq(variables['agent.os'], 'Darwin' ))

# conda - linux
  - bash: echo '##vso[task.prependpath]/usr/share/miniconda/bin'
    displayName: 'Linux - Add conda to PATH'
    condition: and(eq(variables['install.method'], 'conda' ), eq(variables['agent.os'], 'Linux' ))

# conda - create environment
  - task: CondaEnvironment@0
    displayName: 'Conda - Create Test Environment'
    condition: eq(variables['install.method'], 'conda')
    inputs:
      environmentName: 'test-environment-$(python.version)'
      packageSpecs: '-c conda-forge $(qt.bindings) numpy scipy pyopengl pytest flake8 six coverage python=$(python.version)'
  
  - bash: |
      sudo apt-get install -y xvfb libxkbcommon-x11-0
      source activate test-environment-$(python.version)
      pip install pytest-xvfb
    displayName: "Linux Virtual Display Setup (conda)"
    condition: and(eq(variables['install.method'], 'conda'), eq(variables['agent.os'], 'Linux' ))

# conda - all
  - bash: |
      source activate test-environment-$(python.version)
      pip install pytest-azurepipelines pytest-xdist pytest-cov
    displayName: Conda Install Dependencies
    condition: eq(variables['install.method'], 'conda' )

# conda - all
  - bash: |
      source activate test-environment-$(python.version)
      echo python location: `which python`
      echo python version: `python --version`
      echo pytest location: `which pytest`
      echo installed packages
      conda list
      echo pyqtgraph system info
      python -c "import pyqtgraph as pg; pg.systemInfo()"
    displayName: 'Debug - Conda'
    continueOnError: false
    condition: eq(variables['install.method'], 'conda' )

# conda - all
  - bash: |
      source activate test-environment-$(python.version)
      python -m pytest pyqtgraph -sv --test-run-title="Tests for $(Agent.OS) - Python $(python.version) - Install Method $(install.method)- Bindings $(qt.bindings)" --napoleon-docstrings
    displayName: 'Tests - Run - Conda'
    continueOnError: false
    env:
      DISPLAY: :99.0
    condition: eq(variables['install.method'], 'conda' )
